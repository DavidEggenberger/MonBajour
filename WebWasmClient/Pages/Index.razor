@page "/"
@using DTOs
@using DTOs.GooglePlacesAPI
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<div class="indexContainer">
    @if(searched == false)
    {
        <div class="WelcomeContainer">
            <div class="communityTickerContainer">
                <ShareDisplayComponent></ShareDisplayComponent>
            </div>
            <div style="height: 100%; width: 100%; display: grid; place-content: center;">
                <h1>Entdecke dein Basel!</h1>
                <div class="inputContainer">
                    <label>Wo wohnst du?</label>
                    <input @onkeydown="async k => await SearchLocationAsync(k)" spellcheck="false" @bind="inputLocation" @bind:event="oninput"/>
                    <div style="height: 6px; vertical-align: central; display: grid; justify-content: center; width: 100%;">
                        <label style="margin-top: 5px; left: 0; right: 0; text-align: center; font-size: 12px; display: @(showEnterHint ? "block" : "none"); position: relative;">Drücke Enter</label>
                    </div>
                </div>   
            </div>
        </div>
    }
    else
    {
        @if(googlePlacesAPIResponse != null && searched)
        {
            <div class="LocalizedContainer">
                <div class="LocalizedResult">
                    <div style="display: grid;">
                        <h3 style="text-align: center;">@googlePlacesAPIResponse.candidates.First().formatted_address</h3>
                        <Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
                            <NotAuthorized>
                                 <div style="width: 100%; display: grid; place-content: center;">
                                    <button @onclick="() => { searched = false; inputLocation = string.Empty; }">Diese Addresse stimmt nicht</button>
                                </div>
                            </NotAuthorized>
                            <Authorized>
                                <div style="width: 100%; display: grid; grid-template-columns: 1fr 1fr; grid-gap: 20px; justify-content: space-between;">
                                    <button @onclick="() => { searched = false; inputLocation = string.Empty; }">Diese Addresse stimmt nicht</button>
                                    <button @onclick='async () => { await httpClient.PostAsync($"/api/bffuser/address/{googlePlacesAPIResponse.candidates.First().formatted_address}", null); StateHasChanged(); navigationManager.NavigateTo("/", true); }'>Diese Addresse in meinem Profil abspeichern</button>
                                </div>
                            </Authorized>
                        </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
                       
                    </div>
                </div>
                <div class="SearchResultContainer">
                    <div style="height: 100%; width: 100%;">
                        @if(baselAPIData != null)
                        {
                            <div class="AdministrativeContainer">
                                
                            </div>

                            <div class="AdministrativeContainer">

                            </div>
                        }
                    </div>
                </div>
            </div>
        }   
    }
    <div class="alwaysContainer">
        <Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
            <NotAuthorized>
                <div class="LoginMotivationContainer">
                    <a href="/api/bffuser/login"><button>Login to personalize your experience!</button></a>
                </div>
                <div class="SectionOverviewContainer">
                <section>
                    <div class="header">
                        <h2>Sports ⚽️</h2>
                    </div>
                    <div class="main">
                        <h5>Der FCB spielt heute gegen Zürich</h5>
                        <h5>Die Analyse des EHC Basel vor dem Spiel gegen Olten</h5>
                    </div>
                </section>
                <section>
                    <div class="header">
                        <h2>Culture 🎭</h2>
                    </div>
                    <div class="main">
                        <h5>Eine Übersicht über die neuesten Theateraufführungen in Basel</h5>
                        <h5>Wir porträtieren die Jugend-Rap Szene</h5>
                        <h5>Eine Übersicht aller neuen Museumsführungen</h5>
                    </div>
                </section>
                <section>
                    <div class="header">
                        <h2>Events 📅</h2>
                    </div>
                    <div class="main">
                        <h5>Die Schulferien über Weihnachten beginnen am 22.12.2022</h5>
                        <h5>Die Bibliothek xy bleibt am 11.12.2022 geschlossen</h5>
                    </div>
                </section>
                <section>
                    <div class="header">
                        <h2>Facts 📊</h2>
                    </div>
                    <div class="main">
                        <h5>In der Stadt Basel gibt es 4000 freie Parkplätze</h5>
                        <h5>Der Rhein hat eine Temperatur von 10 Grad</h5>
                    </div>
                </section>
            </div> 
            </NotAuthorized>
            <Authorized>
                <div class="PersonalizedSearchContainer">

                </div>
            </Authorized>
        </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
    </div>
</div>

@code{
    private string _inputLocation;
    public string inputLocation
    {
        get => _inputLocation;
        set => _inputLocation = value;
    }
    private bool showEnterHint;
    private bool searched;
    private GooglePlacesAPIResponseDTO googlePlacesAPIResponse;
    private bool askForLocationConfirmation;

    private async Task SearchLocationAsync(KeyboardEventArgs keyboardEventArgs)
    {
        if(keyboardEventArgs.Key == "Enter")
        {
            googlePlacesAPIResponse = await httpClient.GetFromJsonAsync<GooglePlacesAPIResponseDTO>($"/api/placesSearch/{inputLocation}", new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            searched = true;
            StateHasChanged();
            await LoadData(googlePlacesAPIResponse.candidates.First().formatted_address);
        }

        showEnterHint = inputLocation?.Length >= 4 ? true : false;
    }


    private BaselAPIDataBucketDTO baselAPIData;

    private async Task LoadData(string address)
    {
        baselAPIData = await httpClient.GetFromJsonAsync<BaselAPIDataBucketDTO>($"/api/BaselAPIData/{address}");
        StateHasChanged();
    }
}
